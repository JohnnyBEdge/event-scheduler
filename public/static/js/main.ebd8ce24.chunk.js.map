{"version":3,"sources":["components/DateView.js","components/DeleteEvent.js","components/AddEventForm.js","components/EditEventModal.js","pages/Main.js","index.js"],"names":["DateView","props","views","id","onClick","current","setCurrent","length","DeleteEvent","color","window","confirm","fetch","process","method","then","response","json","refresh","AddEventForm","useState","eventName","setEventName","eventType","setEventType","eventDetails","setEventDetails","Date","eventDate","setEventDate","classes","makeStyles","input","width","button","backgroundColor","boxShadow","height","margin","marginTop","useStyles","FormControl","variant","fullWidth","required","InputLabel","OutlinedInput","className","value","onChange","target","label","Select","labelId","MenuItem","TextField","multiline","rowsMax","DateTimePicker","date","animateYearScrolling","disablePast","inputVariant","Button","startIcon","headers","body","JSON","stringify","getEvents","eventMode","EditModal","open","setOpen","event","toggleModal","theme","paper","position","palette","background","border","shadows","padding","spacing","top","left","modal","editButton","Modal","onClose","aria-labelledby","aria-describedby","_id","Main","events","setEvents","expanded","setExpanded","expandForm","setExpandForm","selected","a","res","useEffect","displayEvent","filter","moment","day","year","isToday","week","isoWeek","isWeek","month","isMonth","sort","b","map","ExpansionPanel","isExpanded","key","ExpansionPanelSummary","expandIcon","aria-controls","eDate","toLocaleDateString","undefined","toLocaleTimeString","hour","minute","second","formatDate","ExpansionPanelDetails","EditEventModal","ReactDOM","render","StrictMode","utils","MomentUtils","document","getElementById"],"mappings":"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","file":"static/js/main.ebd8ce24.chunk.js","sourcesContent":["import React from 'react';\nimport '../styling/date-view.css'\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nconst DateView = (props) => {\n    const views = ['Today', 'This Week', 'This Month', 'All Events'];\n\n    const handleNext = () => {\n        if(props.current === views.length-1){\n            props.setCurrent(0)\n        } else {\n            props.setCurrent(props.current + 1)\n        };\n    };\n    const handlePrev = () => {\n        if(props.current === 0){\n            props.setCurrent(views.length - 1)\n        } else {\n            props.setCurrent(props.current - 1)\n        };\n    };\n\n\n    return(\n            <div id=\"date_view\">\n                <NavigateBeforeIcon id=\"before\" onClick={() => handlePrev()} />\n                <div id=\"view_display\">{views[props.current]}</div>\n                <NavigateNextIcon id=\"next\" onClick={() => handleNext()}/>\n            </div>\n    )\n};\n\nexport default DateView;","import React from 'react';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\n\nconst DeleteEvent = (props) => {\n\n    const handleDelete = () => {\n        if(window.confirm(\"Are you sure you want to remove this event?\")){\n            fetch(`${process.env.REACT_APP_API_URL}/api/events/${props.id}`,{\n                method: \"DELETE\"\n            }).then(response => response.json())\n            .then(props.refresh)\n        }\n    }\n\n    return (\n        <DeleteOutlinedIcon  color=\"error\" onClick={() =>{handleDelete()}}/>\n    )\n}\n\nexport default DeleteEvent;","import React, {useState} from 'react';\nimport '../styling/add-event-form.css';\n\n\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\nimport { DateTimePicker } from \"@material-ui/pickers\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst AddEventForm = (props) => {\n\n    const [eventName, setEventName] = useState('');\n    const [eventType, setEventType] = useState('');\n    const [eventDetails, setEventDetails] = useState('');\n    const [eventDate, setEventDate] = useState(new Date());\n\n    const useStyles = makeStyles({\n        input: {\n          width: '98%',\n        },\n        button: {\n            backgroundColor: \"#6772e5\",\n            color: \"#fff\",\n            width: \"100%\",\n            boxShadow: \"0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08)\",\n            height: \"60px\",\n            margin: \"0 auto\",\n            marginTop: \"15px\"\n        }\n      });\n\n    const handleDateChange = (date) => {\n        setEventDate(date);\n    };\n\n  function addNewEvent(){\n      fetch(`${process.env.REACT_APP_API_URL}/api/events`,{\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({eventName, eventType, eventDetails, eventDate})\n      }).then(setEventName(''),setEventType(''),setEventDetails(''),setEventDate(new Date()))\n      .then(props.getEvents)\n      .then()\n  }\n\n\n  const classes = useStyles();\n    return (\n        <div id=\"add_event_form_container\">\n            <FormControl \n                variant=\"outlined\"\n                fullWidth={true}\n                required={true}>\n                <InputLabel >Event Name</InputLabel>\n                <OutlinedInput \n                    className={classes.input}\n                    id=\"component-outlined\" \n                    value={eventName} \n                    onChange={({target}) => setEventName(target.value)}\n                    label=\"eventName\" \n                    />\n            </FormControl>\n            <br/>\n\n            <FormControl \n                id=\"select_event_input\" \n                variant=\"outlined\" \n                fullWidth={true}\n                >\n                <InputLabel id=\"select_event_label\">Event Type</InputLabel>\n                <Select\n                    className={classes.input}\n                    labelId=\"select_event_label\"\n                    id=\"select_event\"\n                    value={eventType} \n                    onChange={({target}) => setEventType(target.value)}\n                    label=\"eventType\"\n                    >\n                <MenuItem value=\"\">\n                    <em>None</em>\n                </MenuItem>\n                <MenuItem value=\"event\">Event</MenuItem>\n                <MenuItem value=\"appointment\">Appointment</MenuItem>\n                <MenuItem value=\"reminder\">Reminder</MenuItem>\n                </Select>\n            </FormControl>\n\n            <FormControl \n                className={classes.input}\n                fullWidth={true}\n            >\n                <TextField\n                    fullWidth={true}\n                    \n                    // \n                    id=\"outlined-multiline-flexible\"\n                    label=\"Details\"\n                    multiline\n                    rowsMax={4}\n                    value={eventDetails} \n                    onChange={({target}) => setEventDetails(target.value)}\n                    variant=\"outlined\"\n                    />\n            </FormControl>\n\n            <FormControl \n            className={classes.input}\n                \n                >\n                <DateTimePicker\n                    fullWidth={true}\n                    label=\"Event Date\"\n                    value={eventDate}\n                    onChange={handleDateChange}\n                    animateYearScrolling\n                    disablePast={true}\n                    inputVariant=\"outlined\"\n                    />\n            </FormControl>\n\n            <Button\n                className={classes.button}\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<AddIcon />}\n                onClick={() => addNewEvent()}\n            >{props.eventMode}\n            </Button>\n        </div>\n    )\n};\n\nexport default AddEventForm;","import React, {useState} from 'react';\n\nimport Modal from '@material-ui/core/Modal';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { DateTimePicker } from \"@material-ui/pickers\";\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n\n\nconst EditModal = (props) => {\n    const [open, setOpen] = useState(false);    \n    const [eventName, setEventName] = useState(props.event.eventName);\n    const [eventType, setEventType] = useState(props.event.eventType);\n    const [eventDetails, setEventDetails] = useState(props.event.eventDetails);\n    const [eventDate, setEventDate] = useState(props.event.eventDate);\n\n    const editInventory = () => {\n        fetch(`${process.env.REACT_APP_API_URL}/api/events/${props.event._id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({eventName, eventType, eventDetails, eventDate})\n        })\n        .then(() => props.refresh())\n        .then(() => toggleModal())\n    };\n\n    const handleDateChange = (date) => {\n        setEventDate(date);\n    };\n\n    const toggleModal = () => {\n        if(open){\n            setOpen(false);\n        } else {\n            setOpen(true)\n        };\n    };\n\n      \n    const useStyles = makeStyles((theme) => ({\n        paper: {\n          position: 'absolute',\n          width: 400,\n          backgroundColor: theme.palette.background.paper,\n          border: '2px solid #000',\n          boxShadow: theme.shadows[5],\n          padding: theme.spacing(2, 4, 3),\n          top: 100,\n          left: '37%',\n        },\n        button: {\n            margin: theme.spacing(2, 0, 2),\n          },\n        input: {\n            margin: theme.spacing(1,0,1),\n            width: \"98%\"\n        },\n        modal: {\n            marginTop: \"-40px\"\n        },\n        editButton: {\n            backgroundColor: \"#6772e5\",\n            color: \"#fff\",\n            width: \"100%\",\n            boxShadow: \"0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08)\",\n            height: \"60px\",\n            margin: \"0 auto\",\n            marginTop: \"15px\"\n            // & :hover {\n            //     background-color: \"#5469d4\"\n        } \n      }));\n\n    const classes = useStyles();\n\n\n    return (\n        <div id=\"edit_modal_container\">\n            <EditOutlinedIcon onClick={toggleModal} />\n            <Modal\n                open={open}\n                onClose={toggleModal}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n                className={classes.modal}\n                >\n\n                <div className={classes.paper}>\n                    <h2 id=\"simple-modal-title\">Edit Event</h2>\n                    <FormControl \n                        variant=\"outlined\"\n                        fullWidth={true}\n                        required={true}>\n                        <InputLabel >Event Name</InputLabel>\n                        <OutlinedInput \n                            className={classes.input}\n                            id=\"component-outlined\" \n                            value={eventName} \n                            onChange={({target}) => setEventName(target.value)}\n                            label=\"eventName\" \n                            />\n                    </FormControl>\n            <br/>\n\n                    <FormControl \n                        id=\"select_event_input\" \n                        variant=\"outlined\" \n                        fullWidth={true}\n                        >\n                        <InputLabel id=\"select_event_label\">Event Type</InputLabel>\n                        <Select\n                            className={classes.input}\n                            labelId=\"select_event_label\"\n                            id=\"select_event\"\n                            value={eventType} \n                            onChange={({target}) => setEventType(target.value)}\n                            label=\"eventType\"\n                            >\n                        <MenuItem value=\"\">\n                            <em>None</em>\n                        </MenuItem>\n                        <MenuItem value=\"event\">Event</MenuItem>\n                        <MenuItem value=\"appointment\">Appointment</MenuItem>\n                        <MenuItem value=\"reminder\">Reminder</MenuItem>\n                        </Select>\n                    </FormControl>\n\n                    <FormControl \n                        className={classes.input}\n                        fullWidth={true}\n                    >\n                        <TextField\n                            fullWidth={true}\n                            id=\"outlined-multiline-flexible\"\n                            label=\"Details\"\n                            multiline\n                            rowsMax={4}\n                            value={eventDetails} \n                            onChange={({target}) => setEventDetails(target.value)}\n                            variant=\"outlined\"\n                            />\n                    </FormControl>\n\n                    <FormControl className={classes.input}>\n                        <DateTimePicker\n                            fullWidth={true}\n                            label=\"Event Date\"\n                            value={eventDate}\n                            onChange={handleDateChange}\n                            animateYearScrolling\n                            disablePast={true}\n                            inputVariant=\"outlined\"\n                            />\n                    </FormControl>\n\n                <Button\n                    className={classes.editButton}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    startIcon={<EditOutlinedIcon /> }\n                    onClick={() => editInventory()}\n                >Update\n                </Button>                                                   \n                </div>\n\n\n            </Modal>\n        </div>\n    )\n};\n\nexport default EditModal;","import React, {useState, useEffect} from 'react';\nimport DateView from '../components/DateView';\nimport DeleteEvent from '../components/DeleteEvent';\nimport AddEventForm from '../components/AddEventForm';\nimport EditEventModal from '../components/EditEventModal';\nimport '../styling/main.css';\n\nimport moment from 'moment';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst Main = () => {\n\n    const [events, setEvents] = useState([]);\n    const [expanded, setExpanded] = useState(false);\n    const [expandForm, setExpandForm] = useState(false);\n    const [current, setCurrent] = useState(0);\n    const [eventMode] = useState(\"Add Event\");\n    const [selected] = useState(\"\")\n\n\n    async function getEvents(){\n         const res = await fetch(`${process.env.REACT_APP_API_URL}/api/events`);\n            res.json()\n            .then(res => setEvents(res))\n    };\n\n    const handleChange = (id) => (event, isExpanded) => {\n        setExpanded(isExpanded ? id : false);\n      };\n\n    const handleExpandedForm = () => {\n        setExpandForm(expandForm ? false : true);\n    };\n    \n\n    function formatDate(eDate){\n        let date = new Date(eDate);\n        \n        let localDateString = date.toLocaleDateString(undefined, {  \n            day : 'numeric',\n            month : 'short',\n            year : 'numeric'\n        });\n        \n        let localTimeString = date.toLocaleTimeString(undefined, {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n        });\n        \n    return localDateString +\" \"+ localTimeString;\n\n    };\n\n\n    useEffect(() => {\n        getEvents();\n    },[]);\n\n\n    function isToday(date){\n      return moment(date).day() === moment().day() && moment(date).year() === moment().year();\n    };\n    function isWeek(date){\n      return moment(date).week() === moment().isoWeek() && moment(date).year() === moment().year();\n    };\n    function isMonth(date){\n      return moment(date).month() === moment().month() && moment(date).year() === moment().year();\n    };\n\n    const filtered = () => {\n        if(current === 0){\n            return events.filter(date => isToday(date.eventDate))\n          } else if(current === 1){\n            return events.filter(date => isWeek(date.eventDate))\n          } else if(current === 2){\n            return events.filter(date => isMonth(date.eventDate))\n          } else {\n              return events;\n          }\n    };\n    \n    const sorted = filtered().sort((a,b) => new Date(a.eventDate) - new Date(b.eventDate))\n\n    const displayEvent = sorted.map((event) => {\n        return  <ExpansionPanel \n                    expanded={expanded === event._id} \n                    onChange={handleChange(event._id)}\n                    key={event._id}>\n                    <ExpansionPanelSummary\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls=\"panel1a-content\"\n                        id=\"panel1a-header\"\n                    >\n                        <div key={event.id} className=\"expansion-panel-summary\">\n                            <p className=\"event-name\">{event.eventName}</p>\n                            <p className={\"event-date\"}> {formatDate(event.eventDate)}</p>\n                        </div>\n\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails >\n\n                        <div className=\"expansion-panel-details\">\n                            <div className=\"event-info\">\n                                <p className=\"event-details\" >{event.eventDetails}</p>\n                            </div>\n                            <div className=\"event-functions\">\n                                <EditEventModal \n                                    event={event}\n                                    refresh={getEvents} \n                                />\n                                <DeleteEvent \n                                    id={event._id} \n                                    refresh={getEvents}\n                                />\n                            </div>\n                        </div>\n\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n  \n    })\n\n    return (\n        \n        <div id=\"main_container\">\n            <DateView \n                setCurrent={setCurrent}\n                current={current}\n                />\n\n            {displayEvent}\n\n\n            <ExpansionPanel expanded={expandForm}>\n                    <ExpansionPanelSummary\n                        onClick={handleExpandedForm}\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls=\"panel1a-content\"\n                        id=\"add_event_panel_summary\"\n                        >\n                        <div >\n                            <p id=\"add_event_btn\">+{eventMode}</p>\n                        </div>\n                    </ExpansionPanelSummary>\n\n                    <ExpansionPanelDetails>\n                        <AddEventForm getEvents={getEvents} eventMode={eventMode} selected={selected}/>\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n        </div>\n    )\n};\n\nexport default Main;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './pages/Main';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport MomentUtils from '@date-io/moment';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <Main />\n    </MuiPickersUtilsProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}